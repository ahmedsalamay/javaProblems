import java.util.ArrayList;
import java.util.Scanner;

public class CPUSchedulingTec {
	
	private int Time=0;
	
static ArrayList<Process> Sort(ArrayList<Process>process)
{int numberOfPocess=process.size();
	for (int i = 0; i < numberOfPocess; i++) {
		for (int j = i + 1; j < numberOfPocess; j++) {
			if (process.get(i).getArrival() > process.get(j).getArrival()) {
				Process tmp = process.get(i);
				process.set(i, process.get(j));
				process.set(j, tmp);
			}
		}
	}
	return process;
	}
static ArrayList<Process> SortBurst(ArrayList<Process>process)
{int numberOfPocess=process.size();
	for (int i = 0; i < numberOfPocess; i++) {
		for (int j = i + 1; j < numberOfPocess; j++) {
			if (process.get(i).getBrust()> process.get(j).getBrust()) {
				Process tmp = process.get(i);
				process.set(i, process.get(j));
				process.set(j, tmp);
			}
		}
	}
	return process;
	}


static void  FIFS(ArrayList<Process>process){
	process =Sort(process);
	double sum=0.0;
	System.out.println("ProcessName" + "   "  + "WatingTime" +"   " +"Statrt At");
    for(int i=0;i<process.size();i++)
    {
        if(i==0)
        {
            process.get(0).setResponse(process.get(0).getArrival());
            process.get(0).setWaiting(0);
            
        }
        else
        {
            double estmatedNewArrival;
            estmatedNewArrival = process.get(i-1).getWaiting() + process.get(i-1).getBrust();  // wating + burst
            if( estmatedNewArrival < process.get(i).getArrival() )  // not arrived 
            {
            	process.get(0).setResponse(process.get(i).getArrival());
                process.get(0).setWaiting(0);
            }
            else{
            	 process.get(i).setWaiting(estmatedNewArrival - process.get(i).getArrival()); 
            	 process.get(i).setResponse( process.get(i).getWaiting()+process.get(i).getArrival());
            }
               
        }
        System.out.println(process.get(i).getName() + "            "  +process.get(i).getWaiting()+ "            "  +process.get(i).getResponse() );
        sum+=process.get(i).getWaiting();
    }
     System.out.println(" response time="+sum);
    System.out.println("AverageWatingTime "+(double)sum/process.size());
}
static void  SJF(ArrayList<Process>process){
	process=Sort(process);
	double First=process.get(0).getArrival();
	process=SortBurst(process);
	 boolean lock=true;
	 int b=0;
	 double totalTime=First,sum=0.0;
	 int size=process.size();
	 for(int i=0;i<size;i++)
	 {
		 totalTime+=process.get(i).getBrust();
	 }
	for(int Time=0;Time<totalTime;Time++)
	{
		lock=true;
		for(int count=0;count<process.size();count++){
			
		if(process.get(count).getBrust()>0){
		if((int)(process.get(count).getArrival())<=Time&&lock==true)
		{
			process.get(count).setResponse(count);
			System.out.print(Time+"--->");
		System.out.println(process.get(count).getName());
		/*if(process.get(count).isBefore()==true)
		{
			process.get(count).setWaiting(count-process.get(count).getResponse());	
		}*/
			//process.get(count).setBefore(true);	
		process.get(count).dec();
		//lock=false;
		b=1;
			process=SortBurst(process);
			
		}
		if(process.get(count).getArrival()<=Time&&lock==false)
		{
			process.get(count).inc();
			System.out.println("INC "+process.get(count).getName());
			System.out.println("Now Wait = "+process.get(count).getWaiting());
			
		}
		if(b==1)
		lock=false;
	   }
		
		}
    }
	for(int i=0;i<process.size();i++)	
	{
		System.out.println(process.get(i).getName() + "            "  +process.get(i).getWaiting() );
        sum+=process.get(i).getWaiting();
	}
	System.out.println(" response time="+sum);
    System.out.println("AverageWatingTime "+(double)sum/process.size());
}
static void RR(ArrayList<Process>process){
	Scanner cin=new Scanner(System.in);
	int quantum=cin.nextInt(),sum=0;
	do
	{
		for (int l = 0; l < process.size(); l++) {
			if(process.get(l).getBrust()>0)
			System.out.println(process.get(l).getName() +"Is Now Running");
			if(process.get(l).getBrust()>quantum)
			{
				process.get(l).setBrust(process.get(l).getBrust()-quantum);
				for(int j = 0 ; j < process.size(); j++){
					if((j!=l)&&(process.get(j).getBrust()!=0))
						process.get(j).incRR(quantum);
					
				}
			}
			else
			{
				for(int j = 0; j <process.size(); j++)
				{
					if((j!=l)&&(process.get(j).getBrust()!=0))
						process.get(j).incRR(process.get(l).getBrust());
				}
				process.get(l).setBrust(0);
				int bool=0;
			if(process.get(l).getBrust()==0&&bool==0)
				{System.out.println(process.get(l).getName() +"Finished");bool=1;}
			}
		}
		sum=0;
		for(int k = 0; k < process.size(); k++)
			sum=(int) (sum+process.get(k).getBrust());
		
	}
	while(sum>0);
	System.out.println("process\t\tBT\tWT\tTAT");
	for(int i = 0; i < process.size(); i++){
		System.out.println("process"+(i+1)+"\t"+"\t"+process.get(i).getWaiting());
	}
	
	
	
	
	/*
	Scanner cin=new Scanner(System.in);
	int quantum= cin.nextInt();
	int Delay=quantum*process.size();
	int TotalChunck=0;
	for(int i=0;i<process.size();i++)
	{
		if((process.get(i).getBrust()/quantum)%quantum==0)
		TotalChunck+=process.get(i).getBrust()/quantum;
		else
			{TotalChunck=(int)(process.get(i).getBrust()/quantum);
			TotalChunck+=1;
			}
		
	}
	process =Sort(process);
	double sum=0.0;
	System.out.println("ProcessName" + "   "  + "WatingTime" +"   " +"Statrt At");
    for(int i=0;i<To;i++)
    {
        if(i==0)
        {
        	if(process.get(0).getBrust()-quantum>0)
        	{
        		 process.get(0).incRR(Delay);
        		 Process pro=process.get(0);
        		 process.remove(0);
        		 process.add(pro);
        	}
        	else{
        		 process.get(0).setWaiting(0);
        	}
            process.get(0).setResponse(process.get(0).getArrival());
           
            
        }
        else
        {
            double estmatedNewArrival;
            estmatedNewArrival = process.get(i-1).getWaiting() + process.get(i-1).getBrust();  // wating + burst
            if( estmatedNewArrival < process.get(i).getArrival() )  // not arrived 
            {
            	if(process.get(i).getBrust()-quantum>0){
            		 process.get(i).incRR(Delay);
            		 Process pro=process.get(i);
            		 process.remove(i);
            		 process.add(pro);
            }else{
       		 process.get(0).setWaiting(0);
       	     }
            	process.get(0).setResponse(process.get(i).getArrival());
               
            }
            else{
            	
            	if(process.get(i).getBrust()-quantum>0){
           		 process.get(i).incRR(Delay+estmatedNewArrival - process.get(i).getArrival());
           		 Process pro=process.get(i);
           		 process.remove(i);
           		 process.add(pro);
           }else{
      		 process.get(0).setWaiting(0);
      	     }
            	
            	
            	 process.get(i).setResponse( process.get(i).getWaiting()+process.get(i).getArrival());
            }
               
        }
        System.out.println(process.get(i).getName() + "            "  +process.get(i).getWaiting()+ "            "  +process.get(i).getResponse() );
        sum+=process.get(i).getWaiting();
    }
     System.out.println(" response time="+sum);
    System.out.println("AverageWatingTime "+(double)sum/process.size());
    */
}
}

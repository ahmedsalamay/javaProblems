import java.util.ArrayList;

public class CPUSchedulingTec {
	
	
static ArrayList<Process> Sort(ArrayList<Process>process)
{int numberOfPocess=process.size();
	for (int i = 0; i < numberOfPocess; i++) {
		for (int j = i + 1; j < numberOfPocess; j++) {
			if (process.get(i).getArrival() > process.get(j).getArrival()) {
				Process tmp = process.get(i);
				process.set(i, process.get(j));
				process.set(j, tmp);
			}
		}
	}
	return process;
	}


void  FIFS(ArrayList<Process>process){
	process =Sort(process);
	double sum=0.0;
	System.out.println("ProcessName" + "   "  + "WatingTime" +"   " +"Response");
    for(int i=0;i<process.size();i++)
    {
        if(i==0)
        {
            process.get(0).setResponse(process.get(0).getArrival());
            process.get(0).setWaiting(0);
            
        }
        else
        {
            double estmatedNewArrival;
            estmatedNewArrival = process.get(i-1).getResponse() + process.get(i-1).getBrust();  // wating + burst
            if( estmatedNewArrival < process.get(i).getArrival() )  // not arrived 
            {
            	process.get(0).setResponse(process.get(i).getArrival());
                process.get(0).setWaiting(0);
            }
            else{
            	 process.get(i).setWaiting(estmatedNewArrival - process.get(i).getArrival()); 
            	 process.get(i).setResponse( process.get(i).getWaiting()+process.get(i).getArrival());
            }
               
        }
        System.out.println(process.get(i).getName() + "            "  +process.get(i).getWaiting()+ "            "  +process.get(i).getResponse() );
        sum+=process.get(i).getWaiting();
    }
     System.out.println(" response time="+sum);
    System.out.println("AverageWatingTime "+(double)sum/process.size());
}
void SJF(){
	
}
void RR(){
	
}
}
